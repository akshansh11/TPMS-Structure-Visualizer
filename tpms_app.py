# -*- coding: utf-8 -*-
"""tpms app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C-LutAOzFuCF-gCFKLEA-pR2KND7ioZ7
"""

import numpy as np
import plotly.graph_objects as go
import streamlit as st

# Define TPMS equations
def gyroid(x, y, z):
    return np.sin(x) * np.cos(y) + np.sin(y) * np.cos(z) + np.sin(z) * np.cos(x)

def schwarz_d(x, y, z):
    return np.cos(x) + np.cos(y) + np.cos(z)

def schwarz_p(x, y, z):
    return np.cos(x) + np.cos(y) + np.cos(z) - 1

def neovius(x, y, z):
    return 3*(np.cos(x) + np.cos(y) + np.cos(z)) + 4*np.cos(x)*np.cos(y)*np.cos(z)

# Define the function to generate the mesh
def generate_tpms(tpms_type='Gyroid', resolution=50, iso_value=0.0):
    x = np.linspace(-2 * np.pi, 2 * np.pi, resolution)
    y = np.linspace(-2 * np.pi, 2 * np.pi, resolution)
    z = np.linspace(-2 * np.pi, 2 * np.pi, resolution)
    x, y, z = np.meshgrid(x, y, z)

    if tpms_type == 'Gyroid':
        values = gyroid(x, y, z)
    elif tpms_type == 'Schwarz D':
        values = schwarz_d(x, y, z)
    elif tpms_type == 'Schwarz P':
        values = schwarz_p(x, y, z)
    elif tpms_type == 'Neovius':
        values = neovius(x, y, z)

    fig = go.Figure(data=go.Isosurface(
        x=x.flatten(),
        y=y.flatten(),
        z=z.flatten(),
        value=values.flatten(),
        isomin=iso_value,
        isomax=iso_value,
        surface_count=1,
        colorscale='Viridis',
    ))

    fig.update_layout(scene=dict(
        xaxis=dict(title='X-axis'),
        yaxis=dict(title='Y-axis'),
        zaxis=dict(title='Z-axis'),
    ))

    return fig

# Streamlit app
st.title("TPMS Structure Visualizer")
st.image("tpms app.jpg")

tpms_type = st.selectbox(
    "Select TPMS Type:",
    ["Gyroid", "Schwarz D", "Schwarz P", "Neovius"]
)

resolution = st.slider(
    "Select Resolution:",
    min_value=20,
    max_value=200,
    value=50,
    step=10
)

iso_value = st.slider(
    "Select Iso Value:",
    min_value=-1.0,
    max_value=1.0,
    value=0.0,
    step=0.01
)

fig = generate_tpms(tpms_type, resolution, iso_value)
st.plotly_chart(fig)
